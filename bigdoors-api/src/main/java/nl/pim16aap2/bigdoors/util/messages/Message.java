package nl.pim16aap2.bigdoors.util.messages;


import org.jetbrains.annotations.NotNull;

/**
 * Represents a localizable message.
 *
 * @author Pim
 */
public enum Message implements MessageVariable
{
    EMPTY(),

    DOORTYPE_BIGDOOR(),
    DOORTYPE_DRAWBRIDGE(),
    DOORTYPE_PORTCULLIS(),
    DOORTYPE_ELEVATOR(),
    DOORTYPE_SLIDINGDOOR(),
    DOORTYPE_FLAG(),
    DOORTYPE_GARAGEDOOR(),
    DOORTYPE_WINDMILL(),
    DOORTYPE_REVOLVINGDOOR(),
    DOORTYPE_CLOCK(),

    ERROR_TOOMANYDOORSOWNED(MessageVariable.DOORLIMIT),
    ERROR_INVALIDDOORNAME(MessageVariable.INPUT),
    ERROR_INVALIDDOORID(MessageVariable.INPUT),
    ERROR_DOORALREADYCLOSED(MessageVariable.DOOR),
    ERROR_DOORALREADYOPEN(MessageVariable.DOOR),
    ERROR_TOGGLEFAILURE(MessageVariable.DOOR),
    ERROR_TOGGLECANCELLED(MessageVariable.DOOR),
    ERROR_NOOPENDIRECTION(MessageVariable.DOOR),
    ERROR_DOORISBUSY(MessageVariable.DOOR),
    ERROR_DOORISLOCKED(MessageVariable.DOOR),
    ERROR_DOORTOOBIG(MessageVariable.DOOR),
    ERROR_NOTOGGLEPERMISSION(MessageVariable.DOOR),
    ERROR_TOOMANYDOORSFOUND(MessageVariable.DOOR),
    ERROR_DOORISOBSTRUCTED(MessageVariable.DOOR),
    ERROR_NODOORSFOUND(),
    ERROR_PLAYERISBUSY(),
    ERROR_PLAYERISNOTBUSY(),
    ERROR_INVALIDINPUT(MessageVariable.INPUT),
    ERROR_PLAYERNOTFOUND(MessageVariable.INPUT),
    ERROR_GENERALERROR(),
    ERROR_NOPERMISSIONFORDOORTYPE(MessageVariable.DOORTYPE),
    ERROR_DOORTYPEDISABLED(MessageVariable.DOORTYPE),
    ERROR_NOPERMISSIONFORLOCATION(MessageVariable.HOOKNAME),
    ERROR_NOPERMISSIONFORACTION(),
    ERROR_COMMAND_NOPERMISSION(),
    ERROR_COMMAND_INVALIDPERMISSIONVALUE(MessageVariable.INPUT),
    ERROR_COMMAND_NOTAPLAYER(),
    ERROR_COMMAND_NOTFOUND(),
    ERROR_COMMAND_NOTHINGTOCONFIRM(),

    GUI_PAGE_DOORLIST(),
    GUI_PAGE_SUBMENU(),
    GUI_PAGE_CONFIRM(),
    GUI_PAGE_NEWDOORS(),
    GUI_PAGE_REMOVEOWNER(),

    GUI_SORTING_ALPHABETICAL(),
    GUI_SORTING_NUMERICAL(),
    GUI_SORTING_TYPICAL(),

    GUI_BUTTON_PREVIOUSPAGE(),
    GUI_BUTTON_NEXTPAGE(),
    GUI_BUTTON_SORT(),
    GUI_BUTTON_NEW(),
    GUI_BUTTON_LOCK(),
    GUI_BUTTON_UNLOCK(),
    GUI_BUTTON_TOGGLE(),
    GUI_BUTTON_INFO(),
    GUI_BUTTON_RELOCATEPB(),
    GUI_BUTTON_DOOR_DELETE(),
    GUI_BUTTON_DOOR_DELETE_CONFIRM(),
    GUI_BUTTON_DOOR_DELETE_CANCEL(),
    GUI_BUTTON_BLOCKSTOMOVE(),
    GUI_BUTTON_DIRECTION(),
    GUI_BUTTON_TIMER(),
    GUI_BUTTON_OWNER_ADD(),
    GUI_BUTTON_OWNER_DELETE(),

    GUI_DESCRIPTION_NEXTPAGE(MessageVariable.NEXTPAGE, MessageVariable.PREVIOUSPAGE, MessageVariable.PAGECOUNT),
    GUI_DESCRIPTION_PREVIOUSPAGE(MessageVariable.NEXTPAGE, MessageVariable.PREVIOUSPAGE, MessageVariable.PAGECOUNT),
    GUI_DESCRIPTION_INITIATION(MessageVariable.DOORTYPE),
    GUI_DESCRIPTION_BLOCKSTOMOVE(MessageVariable.BLOCKSTOMOVE),
    GUI_DESCRIPTION_DOORID(MessageVariable.DOORID),
    GUI_DESCRIPTION_TIMER_SET(MessageVariable.AUTOCLOSE),
    GUI_DESCRIPTION_OPENDIRECTION(MessageVariable.OPENDIRECTION),
    GUI_DESCRIPTION_OPENDIRECTION_RELATIVE(MessageVariable.OPENDIRECTION, MessageVariable.RELATIVEDIRECTION),
    GUI_DESCRIPTION_TIMER_NOTSET(),
    GUI_DESCRIPTION_DOOR_DELETE(),
    GUI_DESCRIPTION_DOOR_DELETE_CONFIRM(),
    GUI_DESCRIPTION_DOOR_DELETE_CANCEL(),
    GUI_DESCRIPTION_INFO(MessageVariable.DOORNAME),

    GENERAL_DIRECTION_CLOCKWISE(),
    GENERAL_DIRECTION_COUNTERCLOCKWISE(),
    GENERAL_DIRECTION_NORTH(),
    GENERAL_DIRECTION_EAST(),
    GENERAL_DIRECTION_SOUTH(),
    GENERAL_DIRECTION_WEST(),
    GENERAL_DIRECTION_UP(),
    GENERAL_DIRECTION_DOWN(),
    GENERAL_DIRECTION_NONE(),

    COMMAND_TIMEOUTORFAIL(),
    COMMAND_ADDOWNER_INIT(),
    COMMAND_ADDOWNER_SUCCESS(),
    COMMAND_ADDOWNER_FAIL(MessageVariable.INPUT),
    COMMAND_REMOVEOWNER_INIT(),
    COMMAND_REMOVEOWNER_SUCCESS(),
    COMMAND_REMOVEOWNER_FAIL(MessageVariable.INPUT),
    COMMAND_REMOVEOWNER_LIST(),
    COMMAND_SET_OPEN_DIR_DELAYED_INIT(),
    COMMAND_SETTIME_INIT(),
    COMMAND_SETTIME_SUCCESS(MessageVariable.AUTOCLOSE),
    COMMAND_SETTIME_DISABLED(),
    COMMAND_BLOCKSTOMOVE_INIT(),
    COMMAND_BLOCKSTOMOVE_SUCCESS(MessageVariable.BLOCKSTOMOVE),
    COMMAND_BLOCKSTOMOVE_DISABLED(),
    COMMAND_SETROTATION_SUCCESS(MessageVariable.OPENDIRECTION),
    COMMAND_DOOR_DELETE_SUCCESS(MessageVariable.DOORNAME, MessageVariable.DOORID),

    CREATOR_GENERAL_GIVENAME(),
    CREATOR_GENERAL_INVALIDPOINT(),
    CREATOR_GENERAL_INVALIDROTATIONPOINT(),
    CREATOR_GENERAL_POWERBLOCKINSIDEDOOR(),
    CREATOR_GENERAL_INVALIDROTATIONDIRECTION(),
    CREATOR_GENERAL_CANCELLED(),
    CREATOR_GENERAL_TIMEOUT(),
    CREATOR_GENERAL_STICKNAME(),
    CREATOR_GENERAL_INIT(),
    CREATOR_GENERAL_AREATOOBIG(MessageVariable.BLOCKCOUNT, MessageVariable.BLOCKLIMIT),
    CREATOR_GENERAL_2NDPOSNOT2D(),
    CREATOR_GENERAL_POINTNOTACORNER(),
    CREATOR_GENERAL_CONFIRMPRICE(MessageVariable.DOORPRICE),
    CREATOR_GENERAL_INSUFFICIENTFUNDS(MessageVariable.DOORPRICE),
    CREATOR_GENERAL_MONEYWITHDRAWN(MessageVariable.DOORPRICE),
    CREATOR_GENERAL_SETPOWERBLOCK(),
    CREATOR_GENERAL_SETOPENDIR(MessageVariable.OPENDIRECTIONLIST),
    CREATOR_GENERAL_POWERBLOCKTOOFAR(MessageVariable.DISTANCE, MessageVariable.DISTANCELIMIT),
    CREATOR_GENERAL_BLOCKSTOMOVETOOFAR(MessageVariable.DISTANCE, MessageVariable.DISTANCELIMIT),


    CREATOR_PBRELOCATOR_STICKLORE(),
    CREATOR_PBRELOCATOR_INIT(),
    CREATOR_PBRELOCATOR_SUCCESS(),
    CREATOR_PBRELOCATOR_LOCATIONINUSE(),
    CREATOR_PBRELOCATOR_LOCATIONNOTINSAMEWORLD(),

    CREATOR_PBINSPECTOR_STICKLORE(),
    CREATOR_PBINSPECTOR_INIT(),

    CREATOR_PORTCULLIS_STICKLORE(),
    CREATOR_PORTCULLIS_INIT(),
    CREATOR_PORTCULLIS_SUCCESS(),
    CREATOR_PORTCULLIS_STEP1(),
    CREATOR_PORTCULLIS_STEP2(),
    CREATOR_PORTCULLIS_BLOCKSTOMOVE(),

    CREATOR_DRAWBRIDGE_STICKLORE(),
    CREATOR_DRAWBRIDGE_INIT(),
    CREATOR_DRAWBRIDGE_SUCCESS(),
    CREATOR_DRAWBRIDGE_STEP1(),
    CREATOR_DRAWBRIDGE_STEP2(),
    CREATOR_DRAWBRIDGE_STEP3(),
    CREATOR_DRAWBRIDGE_STEP4(),

    CREATOR_ELEVATOR_STICKLORE(),
    CREATOR_ELEVATOR_INIT(),
    CREATOR_ELEVATOR_SUCCESS(),
    CREATOR_ELEVATOR_STEP1(),
    CREATOR_ELEVATOR_STEP2(),
    CREATOR_ELEVATOR_BLOCKSTOMOVE(),

    CREATOR_SLIDINGDOOR_STICKLORE(),
    CREATOR_SLIDINGDOOR_INIT(),
    CREATOR_SLIDINGDOOR_SUCCESS(),
    CREATOR_SLIDINGDOOR_STEP1(),
    CREATOR_SLIDINGDOOR_STEP2(),
    CREATOR_SLIDINGDOOR_BLOCKSTOMOVE(),

    CREATOR_BIGDOOR_STICKLORE(),
    CREATOR_BIGDOOR_INIT(),
    CREATOR_BIGDOOR_SUCCESS(),
    CREATOR_BIGDOOR_STEP1(),
    CREATOR_BIGDOOR_STEP2(),
    CREATOR_BIGDOOR_STEP3(),

    CREATOR_FLAG_STICKLORE(),
    CREATOR_FLAG_INIT(),
    CREATOR_FLAG_SUCCESS(),
    CREATOR_FLAG_STEP1(),
    CREATOR_FLAG_STEP2(),
    CREATOR_FLAG_STEP3(),

    CREATOR_WINDMILL_STICKLORE(),
    CREATOR_WINDMILL_INIT(),
    CREATOR_WINDMILL_SUCCESS(),
    CREATOR_WINDMILL_STEP1(),
    CREATOR_WINDMILL_STEP2(),
    CREATOR_WINDMILL_STEP3(),

    CREATOR_REVOLVINGDOOR_STICKLORE(),
    CREATOR_REVOLVINGDOOR_INIT(),
    CREATOR_REVOLVINGDOOR_SUCCESS(),
    CREATOR_REVOLVINGDOOR_STEP1(),
    CREATOR_REVOLVINGDOOR_STEP2(),
    CREATOR_REVOLVINGDOOR_STEP3(),

    CREATOR_GARAGEDOOR_STICKLORE(),
    CREATOR_GARAGEDOOR_INIT(),
    CREATOR_GARAGEDOOR_SUCCESS(),
    CREATOR_GARAGEDOOR_STEP1(),
    CREATOR_GARAGEDOOR_STEP2(),
    CREATOR_GARAGEDOOR_STEP3(),

    CREATOR_CLOCK_STICKLORE(),
    CREATOR_CLOCK_INIT(),
    CREATOR_CLOCK_SUCCESS(),
    CREATOR_CLOCK_STEP1(),
    CREATOR_CLOCK_STEP2(),
    CREATOR_CLOCK_STEP3(),
    CREATOR_CLOCK_SELECTHOURARMSIDE(),

    ;

    /**
     * The list of names that can be used as variables in this message.
     * <p>
     * For example: "This door will move %BLOCKSTOMOVE% blocks." Would contain at least "%BLOCKSTOMOVE%".
     */
    private final @NotNull String[] variableNames;

    /**
     * Constructs a message.
     *
     * @param variableNames The names of the variables in the value that can be replaced.
     */
    Message(final @NotNull String... variableNames)
    {
        this.variableNames = variableNames;
    }

    /**
     * Gets the name of the variable at the given position for the given message.
     *
     * @param msg The message for which to retrieve the variable name.
     * @param idx The index of the variable name.
     * @return The name of the variable at the given position of this message.
     */
    public static @NotNull String getVariableName(final @NotNull Message msg, final int idx)
    {
        return msg.variableNames[idx];
    }

    /**
     * Gets the names of the variables for the given message..
     *
     * @param msg The message for which to retrieve the variable names.
     * @return The names of the variables of this message.
     */
    public static @NotNull String[] getVariableNames(final @NotNull Message msg)
    {
        return msg.variableNames;
    }

    /**
     * Gets the number of variables in this message that can be substituted.
     *
     * @param msg The message to retrieve the variable count for.
     * @return The number of variables in this message that can be substituted.
     */
    public static int getVariableCount(final @NotNull Message msg)
    {
        return msg.variableNames.length;
    }
}
