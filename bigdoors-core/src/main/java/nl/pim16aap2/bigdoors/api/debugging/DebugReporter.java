package nl.pim16aap2.bigdoors.api.debugging;

import lombok.AllArgsConstructor;
import lombok.extern.flogger.Flogger;
import nl.pim16aap2.bigdoors.api.IBigDoorsPlatformProvider;
import org.jetbrains.annotations.Nullable;

import java.util.ArrayList;
import java.util.List;
import java.util.Objects;
import java.util.logging.Level;

@Flogger
@AllArgsConstructor
public abstract class DebugReporter
{
    private final List<IDebuggable> debuggables = new ArrayList<>();

    protected final IBigDoorsPlatformProvider platformProvider;

    public final void registerDebuggable(IDebuggable debuggable)
    {
        debuggables.add(Objects.requireNonNull(debuggable, "Cannot register null debuggable!"));
    }

    /**
     * Gets the data-dump containing useful information for debugging issues.
     */
    public final String getDebugReport()
    {
        final StringBuilder sb = new StringBuilder("BigDoors debug dump:\n")
            .append("Java home: ").append(System.getProperty("java.home"))
            .append('\n')
            .append("Java compiler: ").append(System.getProperty("java.compiler"))
            .append('\n')
            .append("Java vendor: ").append(System.getProperty("java.vendor"))
            .append('\n')
            .append("Java version: ").append(System.getProperty("java.version"))
            .append('\n')
            .append("Java Runtime version: ").append(System.getProperty("java.runtime.version"))
            .append('\n')
            .append("JVM name: ").append(System.getProperty("java.vm.name"))
            .append('\n')
            .append("JVM version: ").append(System.getProperty("java.vm.version"))
            .append('\n')
            .append("JVM specification version: ").append(System.getProperty("java.vm.specification.version"))
            .append('\n')
            .append("JVM specification name: ").append(System.getProperty("java.vm.specification.name"))
            .append('\n')
            .append("OS Name: ").append(System.getProperty("os.name"))
            .append('\n')
            .append("OS Arch: ").append(System.getProperty("os.arch"))
            .append('\n')
            .append("OS Version: ").append(System.getProperty(" os.version"))
            .append('\n')
            .append("TMP: ").append(System.getProperty("java.io.tmpdir"))
            .append('\n')
            .append("TMP SQLite: ").append(System.getProperty("org.sqlite.tmpdir"))
            .append('\n')
            .append("Registered Platform: ").append(getPlatformName(platformProvider))
            .append('\n')

            .append(getAdditionalDebugReport0())
            .append('\n');

        for (final IDebuggable debuggable : debuggables)
            sb.append(debuggableToString(debuggable)).append('\n');

        return sb.toString();
    }

    private static String debuggableToString(IDebuggable debuggable)
    {
        final String debuggableName = debuggable.getClass().getName();
        @Nullable String msg;

        try
        {
            msg = debuggable.getDebugInformation();
            if (msg == null || msg.isBlank())
                msg = "Nothing to log!";
        }
        catch (Exception e)
        {
            log.at(Level.SEVERE).withCause(e).log("Failed to get debug information for class: %s", debuggableName);
            msg = "ERROR";
        }

        return debuggableName + ":\n" + msg;
    }

    private static String getPlatformName(@Nullable IBigDoorsPlatformProvider platformProvider)
    {
        try
        {
            if (platformProvider == null)
                return "ERROR: No platform provider!";
            return platformProvider.getPlatform().map(platform -> platform.getClass().getName()).orElse("NULL");
        }
        catch (Exception e)
        {
            log.at(Level.SEVERE).withCause(e).log();
            return "ERROR";
        }
    }

    private String getAdditionalDebugReport0()
    {
        try
        {
            return getAdditionalDebugReport();
        }
        catch (Exception e)
        {
            log.at(Level.SEVERE).withCause(e).log("Failed to get additional debug data!");
            return "ERROR";
        }
    }

    /**
     * Gets the additional debug report generated by the subclass.
     *
     * @return The formatted additional debug report. This is appended to the general debug report.
     */
    protected abstract String getAdditionalDebugReport();

    @Override
    public final String toString()
    {
        return getDebugReport();
    }
}
