package nl.pim16aap2.bigdoors.storage;

import nl.pim16aap2.bigdoors.util.Functional.CheckedTriConsumer;
import nl.pim16aap2.bigdoors.util.Util;
import org.jetbrains.annotations.NotNull;

import java.math.BigDecimal;
import java.sql.Connection;
import java.sql.Date;
import java.sql.PreparedStatement;
import java.sql.SQLException;
import java.sql.Time;
import java.sql.Timestamp;

/**
 * Represents a wrapper around {@link PreparedStatement}. It can be used to set variables before obtaining a
 * connection.
 *
 * @author Pim
 */
public class PPreparedStatement
{
    @NotNull
    private final Action[] actions;
    @NotNull
    private final String statement;

    /**
     * Constructs a new {@link PPreparedStatement}.
     * <p>
     * It counts the number of variables ('?' characters) in the statement.
     *
     * @param statement The SQL statement.
     */
    public PPreparedStatement(final @NotNull String statement)
    {
        actions = new Action[Util.getQuestionMarkCount(statement)];
        this.statement = statement;
    }

    /**
     * Constructs a new {@link PPreparedStatement}.
     *
     * @param variableCount The number of variables ('?' characters) in the statement.
     * @param statement     The SQL statement.
     */
    public PPreparedStatement(final int variableCount, final @NotNull String statement)
    {
        actions = new Action[variableCount];
        this.statement = statement;
    }

    /**
     * Constructs a {@link PreparedStatement} from this {@link PPreparedStatement}, applying all variables as defined up
     * to this point.
     *
     * @param conn A connection to a database.
     * @return The constructed {@link PreparedStatement}.
     *
     * @throws SQLException
     */
    public PreparedStatement construct(final @NotNull Connection conn)
        throws SQLException
    {
        final PreparedStatement ps = conn.prepareStatement(statement);
        for (final Action action : actions)
            action.getFun().accept(ps, action.getIdx(), action.getObj());
        return ps;
    }

    /**
     * Constructs a {@link PreparedStatement} from this {@link PPreparedStatement}, applying all variables as defined up
     * to this point.
     *
     * @param conn              A connection to a database.
     * @param autoGeneratedKeys A flag indicating whether auto-generated keys should be returned; one of
     *                          Statement.RETURN_GENERATED_KEYS or Statement.NO_GENERATED_KEYS
     * @return The constructed {@link PreparedStatement}.
     *
     * @throws SQLException
     */
    public PreparedStatement construct(final @NotNull Connection conn, final int autoGeneratedKeys)
        throws SQLException
    {
        final PreparedStatement ps = conn.prepareStatement(statement, autoGeneratedKeys);
        for (final Action action : actions)
            action.getFun().accept(ps, action.getIdx(), action.getObj());
        return ps;
    }

    /**
     * See {@link PreparedStatement#setBoolean(int, boolean)}.
     */
    private static void setBoolean(final @NotNull PreparedStatement preparedStatement, final int idx,
                                   final @NotNull Object obj)
        throws SQLException
    {
        preparedStatement.setBoolean(idx, (Boolean) obj);
    }

    /**
     * See {@link PreparedStatement#setByte(int, byte)}.
     */
    private static void setByte(final @NotNull PreparedStatement preparedStatement, final int idx,
                                final @NotNull Object obj)
        throws SQLException
    {
        preparedStatement.setByte(idx, (Byte) obj);
    }

    /**
     * See {@link PreparedStatement#setShort(int, short)}.
     */
    private static void setShort(final @NotNull PreparedStatement preparedStatement, final int idx,
                                 final @NotNull Object obj)
        throws SQLException
    {
        preparedStatement.setShort(idx, (Short) obj);
    }

    /**
     * See {@link PreparedStatement#setInt(int, int)}.
     */
    private static void setInt(final @NotNull PreparedStatement preparedStatement, final int idx,
                               final @NotNull Object obj)
        throws SQLException
    {
        preparedStatement.setInt(idx, (Integer) obj);
    }

    /**
     * See {@link PreparedStatement#setLong(int, long)}.
     */
    private static void setLong(final @NotNull PreparedStatement preparedStatement, final int idx,
                                final @NotNull Object obj)
        throws SQLException
    {
        preparedStatement.setLong(idx, (Long) obj);
    }

    /**
     * See {@link PreparedStatement#setFloat(int, float)}.
     */
    private static void setFloat(final @NotNull PreparedStatement preparedStatement, final int idx,
                                 final @NotNull Object obj)
        throws SQLException
    {
        preparedStatement.setFloat(idx, (Float) obj);
    }

    /**
     * See {@link PreparedStatement#setDouble(int, double)}.
     */
    private static void setDouble(final @NotNull PreparedStatement preparedStatement, final int idx,
                                  final @NotNull Object obj)
        throws SQLException
    {
        preparedStatement.setDouble(idx, (Double) obj);
    }

    /**
     * See {@link PreparedStatement#setBigDecimal(int, BigDecimal)}.
     */
    private static void setBigDecimal(final @NotNull PreparedStatement preparedStatement, final int idx,
                                      final @NotNull Object obj)
        throws SQLException
    {
        preparedStatement.setBigDecimal(idx, (BigDecimal) obj);
    }

    /**
     * See {@link PreparedStatement#setString(int, String)}.
     */
    private static void setString(final @NotNull PreparedStatement preparedStatement, final int idx,
                                  final @NotNull Object obj)
        throws SQLException
    {
        preparedStatement.setString(idx, (String) obj);
    }

    /**
     * See {@link PreparedStatement#setBytes(int, byte[])}.
     */
    private static void setBytes(final @NotNull PreparedStatement preparedStatement, final int idx,
                                 final @NotNull Object obj)
        throws SQLException
    {
        preparedStatement.setBytes(idx, (byte[]) obj);
    }

    /**
     * See {@link PreparedStatement#setDate(int, Date)}.
     */
    private static void setDate(final @NotNull PreparedStatement preparedStatement, final int idx,
                                final @NotNull Object obj)
        throws SQLException
    {
        preparedStatement.setDate(idx, (Date) obj);
    }

    /**
     * See {@link PreparedStatement#setTime(int, Time)}.
     */
    private static void setTime(final @NotNull PreparedStatement preparedStatement, final int idx,
                                final @NotNull Object obj)
        throws SQLException
    {
        preparedStatement.setTime(idx, (Time) obj);
    }

    /**
     * See {@link PreparedStatement#setTimestamp(int, Timestamp)}.
     */
    private static void setTimestamp(final @NotNull PreparedStatement preparedStatement, final int idx,
                                     final @NotNull Object obj)
        throws SQLException
    {
        preparedStatement.setTimestamp(idx, (Timestamp) obj);
    }

    /**
     * See {@link PreparedStatement#setObject(int, Object)}.
     */
    private static void setObject(final @NotNull PreparedStatement preparedStatement, final int idx,
                                  final @NotNull Object obj)
        throws SQLException
    {
        preparedStatement.setObject(idx, obj);
    }

    /**
     * See {@link PreparedStatement#setBoolean(int, boolean)}.
     */
    public PPreparedStatement setBoolean(final int idx, final boolean obj)
    {
        actions[idx - 1] = new Action(PPreparedStatement::setBoolean, idx, obj);
        return this;
    }

    /**
     * See {@link PreparedStatement#setByte(int, byte)}.
     */
    public PPreparedStatement setByte(final int idx, final byte obj)
    {
        actions[idx - 1] = new Action(PPreparedStatement::setByte, idx, obj);
        return this;
    }

    /**
     * See {@link PreparedStatement#setShort(int, short)}.
     */
    public PPreparedStatement setShort(final int idx, final short obj)
    {
        actions[idx - 1] = new Action(PPreparedStatement::setShort, idx, obj);
        return this;
    }

    /**
     * See {@link PreparedStatement#setInt(int, int)}.
     */
    public PPreparedStatement setInt(final int idx, final int obj)
    {
        actions[idx - 1] = new Action(PPreparedStatement::setInt, idx, obj);
        return this;
    }

    /**
     * See {@link PreparedStatement#setLong(int, long)}.
     */
    public PPreparedStatement setLong(final int idx, final long obj)
    {
        actions[idx - 1] = new Action(PPreparedStatement::setLong, idx, obj);
        return this;
    }

    /**
     * See {@link PreparedStatement#setFloat(int, float)}.
     */
    public PPreparedStatement setFloat(final int idx, final float obj)
    {
        actions[idx - 1] = new Action(PPreparedStatement::setFloat, idx, obj);
        return this;
    }

    /**
     * See {@link PreparedStatement#setDouble(int, double)}.
     */
    public PPreparedStatement setDouble(final int idx, final @NotNull Object obj)
    {
        actions[idx - 1] = new Action(PPreparedStatement::setDouble, idx, obj);
        return this;
    }

    /**
     * See {@link PreparedStatement#setBigDecimal(int, BigDecimal)}.
     */
    public PPreparedStatement setBigDecimal(final int idx, final @NotNull BigDecimal obj)
    {
        actions[idx - 1] = new Action(PPreparedStatement::setBigDecimal, idx, obj);
        return this;
    }

    /**
     * See {@link PreparedStatement#setString(int, String)}.
     */
    public PPreparedStatement setString(final int idx, final @NotNull String obj)
    {
        actions[idx - 1] = new Action(PPreparedStatement::setString, idx, obj);
        return this;
    }

    /**
     * See {@link PreparedStatement#setBytes(int, byte[])}.
     */
    public PPreparedStatement setBytes(final int idx, final @NotNull byte[] obj)
    {
        actions[idx - 1] = new Action(PPreparedStatement::setBytes, idx, obj);
        return this;
    }

    /**
     * See {@link PreparedStatement#setDate(int, Date)}.
     */
    public PPreparedStatement setDate(final int idx, final @NotNull Date obj)
    {
        actions[idx - 1] = new Action(PPreparedStatement::setDate, idx, obj);
        return this;
    }

    /**
     * See {@link PreparedStatement#setTime(int, Time)}.
     */
    public PPreparedStatement setTime(final int idx, final @NotNull Time obj)
    {
        actions[idx - 1] = new Action(PPreparedStatement::setTime, idx, obj);
        return this;
    }

    /**
     * See {@link PreparedStatement#setTimestamp(int, Timestamp)}.
     */
    public PPreparedStatement setTimestamp(final int idx, final @NotNull Timestamp obj)
    {
        actions[idx - 1] = new Action(PPreparedStatement::setTimestamp, idx, obj);
        return this;
    }

    /**
     * See {@link PreparedStatement#setObject(int, Object)}.
     */
    public PPreparedStatement setObject(final int idx, final @NotNull Object obj)
    {
        actions[idx - 1] = new Action(PPreparedStatement::setObject, idx, obj);
        return this;
    }

    private static final class Action
    {
        @NotNull
        private final CheckedTriConsumer<PreparedStatement, Integer, Object, SQLException> fun;
        private final int idx;
        @NotNull
        private final Object obj;

        private Action(final @NotNull CheckedTriConsumer<PreparedStatement, Integer, Object, SQLException> fun,
                       final int idx, final @NotNull Object obj)
        {
            this.fun = fun;
            this.idx = idx;
            this.obj = obj;
        }

        @NotNull
        private Object getObj()
        {
            return obj;
        }

        private int getIdx()
        {
            return idx;
        }

        @NotNull
        private CheckedTriConsumer<PreparedStatement, Integer, Object, SQLException> getFun()
        {
            return fun;
        }
    }
}
